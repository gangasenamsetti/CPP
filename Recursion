#include <bits/stdc++.h>
using namespace std;
void print(int i) //recursion
{
    if(i>10) return;
    cout<<i<<" "; // 1 2 3 4 5 6 7 8 9 10
    print(i+1);
}
void print_reverse(int i) //recursion
{
    if(i<=0) return;
    cout<<i<<" "; // 10 9 8 7 6 5 4 3 2 1
    print_reverse(i-1);
}
void printing1(int i) //backtracking
{
    if(i>10) return;
    printing1(i+1); // 10 9 7 6 5 4 3 2 1
    cout<<i<<" ";
}
void printing2(int i) //backtracking
{
    if(i<=0) return;
    printing2(i-1); //1 2 3 4 5 6 7 8 9 10
    cout<<i<<" ";
}
bool palin(string s,int i,int j)
{
    if(i>j) return true;
    if(s[i]!=s[j]) return false;
    return palin(s,i+1,j-1);
}
int nth_fib(int n)
{
    if(n<=1) return n;
    return nth_fib(n-1)+nth_fib(n-2);
}
int sum_of_n_numbers(int n)
{
    if(n<0) return 0;
    return n+sum_of_n_numbers(n-1);
}
int main() {
    // Write C++ code here
    print(1);
    cout<<endl;
    print_reverse(10);
    cout<<endl;
    string s="madam";
    cout<<palin(s,0,s.size()-1);
    cout<<endl;
    printing1(1);
    cout<<endl;
    printing2(10);
    cout<<sum_of_n_numbers(5); //15
    cout<<endl;
    cout<<nth_fib(10); // 0 1 1 2 3 5 8 13 21 34 55 
    return 0;
}

o/p:
1 2 3 4 5 6 7 8 9 10 
10 9 8 7 6 5 4 3 2 1 
1
10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 


                                    **SORTING ARRAY USING RECURSION***
                                    
#include <bits/stdc++.h>
using namespace std;
int isSorted(int arr[],int n,int i)
{
    if(i==n-1) return 1; //checks until last index
    if(arr[i]<arr[i+1]){
        return isSorted(arr,n,i+1);
    }
    else return -1;
}
int main() {
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];
  cout<<isSorted(arr,n,0);
    return 0;
}
o/p:
5
1 2 4 3 5
-1
 
                                                **SORTING AN ARRAY WITHOUT USING EXTRA VARIABLE USING RECURSION***
 #include <bits/stdc++.h>
using namespace std;
int isSorted(int arr[],int n)
{
    if(n==1) return 1; //checks until last index
    if(arr[0]<arr[1]){ //1 2 3 4 5     2 3 4 5    3 4 5     4 5
        return isSorted(arr+1,n-1);
    }
    else return -1;
}
int main() {
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];
  cout<<isSorted(arr,n);
    return 0;
}


                                             **FIRST AND LAST OCCUREANCE IN AN ARRAY USING RECURSION***
#include <bits/stdc++.h>
using namespace std;
int firstOccurance(int n,int key,int arr[])
{
    if(n==0) return -1;
    if(arr[0]==key) return 0;
    int ind=firstOccurance(n-1,key,arr+1);
    if(ind==-1) {
        return -1;
    }
    return ind+1;
}
int lastOccur(int n,int key,int arr[])
{
    if(n==0) return -1;
    int ind=lastOccur(n-1,key,arr+1);
    if(ind==-1)
    {
        if(arr[0]==key) return 0;
        else return -1;
    }
    return ind+1;
}
int main() {
  int n,k;
  cin>>n>>k;
  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];
 cout<<firstOccurance(n,k,arr)<<endl;
 cout<<lastOccur(n,k,arr);
}

o/p:
5 4
1 4 2 4 6
1
3


                                          ****COMBINATION_SUMM LEETCODE PROBLEM NO39 USING RECURSION*****
                                          
#include <bits/stdc++.h>
using namespace  std;
void combination_sum(int ind,int n,int arr[],vector<int>ds,int target)
{
  if(ind==n)
  {
    if(target==0){
        for(int i=0;i<ds.size();i++) cout<<ds[i]<<" ";
        cout<<"\n";
     }
    return;
  }
    if(target>=arr[ind])
    {
        ds.push_back(arr[ind]);
        combination_sum(ind,n,arr,ds,target-arr[ind]);
        ds.pop_back();
    }
    combination_sum(ind+1,n,arr,ds,target);
}
int main() {
    // Write C++ code here
   int n,arr[n],target;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cin>>target;
    vector<int>ds;
   combination_sum(0,n,arr,ds,target);
    return 0;
}

O/P:
4 
2 3 6 7
7
output:
2 2 3 
7

