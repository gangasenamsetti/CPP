#include <bits/stdc++.h>
using namespace std;

class Node
{
    public:
    Node *next;
    int data;
    Node(int val){
        this->data=val;
        this->next=NULL;
    }
};
class Linkedlist
{
    public:
    Node *head,*tail;
    Linkedlist(){
        head=tail=NULL;
    }
    void insertFirst(int val)
    {
        Node *temp=new Node(val);
        if(head==NULL){
            head=temp;
        }
        else{
            temp->next=head;
            head=temp;
        }
    }
     int length_ll()
    {
        Node *temp=head;
        int cnt=0;
        while(temp!=NULL){
            cnt++;
            temp=temp->next;
        }
        return cnt;
    }
   void insertLast(int val){
        Node *temp = new Node(val);
        if(head==NULL){
            head = temp;
        }
        else{
            Node* temp1 = head;
            while(temp1->next!=NULL){
                temp1=temp1->next;
            }
            temp1->next=temp;
        }
    }
    void insert_at_pos(int val,int pos)
    {
        Node *nn=new Node(val);
        Node *temp=head;
        //pos--;
        while(pos!=1){
            temp=temp->next;
            pos--;
        }
        nn->next=temp->next;
        temp->next=nn;
    }
    // void del_at_pos(int pos) error
    // {
    //     Node *temp=*head;
    //     pos--;
    //     while(pos!=1){
    //         temp=temp->next;
    //         pos--;
    //     }
    //     Node* temp1=temp->next;
    //      delete temp1;
    //     temp1=temp1->next->next;
       
    // }
    void deleteFirst(){
        Node *temp=head;
        head=head->next;
        delete temp;
    }
    void deleteLast(){
        Node *temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        delete(temp);
        //free(temp)
    }
    void display(){
        Node *temp=head;
        while(temp){
            cout<<temp->data<<" ";
            temp=temp->next;
        }
    }
};

int main() {
   Linkedlist list;
   
   list.insertFirst(20);
   list.insertFirst(30);
   list.insertLast(50);
   list.insertLast(60);
   list.insertLast(70);
   list.insertLast(80);
   list.insert_at_pos(100,3);
   
   //list.deleteFirst();
   
   list.display();
    cout<<list.length_ll();

    return 0;
}
