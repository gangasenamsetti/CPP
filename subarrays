SUBARRAY--->CONTINOUS  N*(N+1)/2
SUBSEQUENCE--->CONTINOUS AND NON-CONTIONUS BUT FOLLOWS ORDER BUT NON-EMPTY   2^N-1
SUbSETS-->CONTINOUS AND NON-CONTINOUS AND FOLLOWS ORDER BUT NON-EMPTY ALSO CONTAINS 2^N



#include <bits/stdc++.h>
using namespace std;
void subarrays(int arr[],int n)
{
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            for(int k=i;k<=j;k++){ //for printing values in that range
                cout<<arr[k]<<" ";
            }
            cout<<endl;
        }
    }
}

int main() {
    // Write C++ code here
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    subarrays(arr,n);

    return 0;
}

output:
3
1 2 3
1 
1 2 
1 2 3 
2 
2 3 
3 

                         ***GENERATE SUBSTRINGS IN A STRING****
#include <bits/stdc++.h>
using namespace std;
int main() {
    // Write C++ code here
    string s;
    cin>>s;
    int n=s.size();
    vector<string>v;
    for(int i=0;i<n;i++){
        string ss="";
        for(int j=i;j<n;j++){
            ss+=s[j];
            v.push_back(ss);
        }
    }
    for(auto it:v) cout<<it<<" ";

    return 0;
}
O/P:
abc
a ab abc b bc c 



                                                  ************GENERATING SUBSETS***************
#include <bits/stdc++.h>
using namespace std;
void subsets(int n,int arr[])
{
    for(int i=0;i<(1<<n);i++){ //(1<<n) means 2*n  that can be written as pow(2,n)
        for(int j=0;j<n;j++){
            if(i&(1<<j)){
                cout<<arr[j]<<" ";
            }
        }
        cout<<endl;
    }
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    subsets(n,arr);
    return 0;
}
OUTPUT: //includes empty space also
3
1 2 3
1 
2 
1 2 
3 
1 3 
2 3 
1 2 3 




