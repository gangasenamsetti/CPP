                                              ***NTH FIBONACCI NUMBER****
#include<iostream>
using namespace std;
int fib(int n)// 0 1 1 2  3 5 8 13 21
{
    int a=0,b=1,c;
    for(int i=2;i<n;i++){
        c=a+b;
        a=b;
        b=c;
    }
    return c;
}
int main()
{
    int n;
    cin>>n;//9 //(9th fabinocii number is 21)
    cout<<fib(n);//21
}
             
   ##USING RECURSION Nth fibonocii number
if(n==0) return 0;
if(n==1) return 1; // or if(n<=1) return n;
return fib(n-1)+fib(n-2);
  
  
                                       //NEAREST FIBONACII NUMBER***
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    if(n<0) return 0;
    if(n==0 || n==1) return n;
    int a=0,b=1,c=a+b;
    while(c<=n){
        a=b;
        b=c;
        c=a+b;
    }
    cout<<c;
}
output:
10
13  //  0 1 1 2 3 5 8 13 21 34 (10 nearest fabinocii is 13)


                                   //FIBONACII OR NOT
import java.util.*;
class test
{
    static boolean fabi(int n)
    {
         int a=0,b=1,c=a+b;
        while(c<=n)
        {
            c=a+b;
            a=b;
            b=c;
            if(c==n){
                return true;
            }
        }
        return false;
        
    }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        if(fabi(n)) System.out.println("True");
        else System.out.println("False");
    }
}

